#include <iostream>
#include <vector>
#include <string>
#include <map>

//  Online Compiler: https://www.onlinegdb.com/online_c++_compiler
// Team scores from where the stats were taken: https://www.slgr.gr/el/scoreboard/21/111/

class Omada {
private:
int GF;
int GA;
int GD;

public:
Omada(int gf, int ga, int gd) : GF(gf), GA(ga), GD(gd) {}

int getGF() const {
    return GF;
}

int getGA() const {
    return GA;
}

int getGD() const {
    return GD;
}


virtual std::string getTeamName() const = 0;

void printStats() {
    int gf = getGF();
    int ga = getGA();
    int gd = gf - ga;
    std::cout << getTeamName() << ": " << "GF: " << gf << ", GA: " << ga << ", GD: " << gd << std::endl;
}

};

class AEK : public Omada {
public:
AEK(int gf, int ga, int gd) : Omada(gf, ga, gd) {}

std::string getTeamName() const {
    return "AEK";
}

};

class Olympiakos : public Omada {
public:
Olympiakos(int gf, int ga, int gd) : Omada(gf, ga, gd) {}

std::string getTeamName() const {
    return "Olympiakos";
}

};

class PAOK : public Omada {
public:
PAOK(int gf, int ga, int gd) : Omada(gf, ga, gd) {}

std::string getTeamName() const {
    return "PAOK";
}

};

class Volos : public Omada {
public:
Volos (int gf, int ga, int gd) : Omada(gf, ga, gd) {}

std::string getTeamName() const {
    return "Volos";
}

};

class Arhs : public Omada {
public:
Arhs(int gf, int ga, int gd) : Omada(gf, ga, gd) {}

std::string getTeamName() const {
    return "Arhs";
}

};


class Panaitwlikos : public Omada {
public:
Panaitwlikos(int gf, int ga, int gd) : Omada(gf, ga, gd) {}

std::string getTeamName() const {
    return "Panaitwlikos";
}

};

class Atromhtos : public Omada {
public:
Atromhtos(int gf, int ga, int gd) : Omada(gf, ga, gd) {}

std::string getTeamName() const {
    return "Atromhtos";
}

};

class OFH : public Omada {
public:
OFH(int gf, int ga, int gd) : Omada(gf, ga, gd) {}

std::string getTeamName() const {
    return "OFH";
}

};

class Asteras : public Omada {
public:
Asteras(int gf, int ga, int gd) : Omada(gf, ga, gd) {}

std::string getTeamName() const {
    return "Asteras";
}

};

class Giannina : public Omada {
public:
Giannina(int gf, int ga, int gd) : Omada(gf, ga, gd) {}

std::string getTeamName() const {
    return "Giannina";
}

};

class Iwnikos : public Omada {
public:
Iwnikos(int gf, int ga, int gd) : Omada(gf, ga, gd) {}

std::string getTeamName() const {
    return "Iwnikos";
}

};

class Lamia : public Omada {
public:
Lamia(int gf, int ga, int gd) : Omada(gf, ga, gd) {}

std::string getTeamName() const {
    return "Lamia";
}

};

class Levadeiakos : public Omada {
public:
Levadeiakos(int gf, int ga, int gd) : Omada(gf, ga, gd) {}

std::string getTeamName() const {
    return "Levadeiakos";
}

};

class Panathinaikos : public Omada {
public:
Panathinaikos(int gf, int ga, int gd) : Omada(gf, ga, gd) {}

std::string getTeamName() const {
    return "Panathinaikos";
}

};

int main() {
std::vector<Omada*> omades;
std::map<std::string, int> scores;

omades.push_back(new Panathinaikos(1,0,1)); // 1
omades.push_back(new Panathinaikos(2,0,2)); // 2
omades.push_back(new Panathinaikos(1,0,1)); // 3
omades.push_back(new Panathinaikos(2,1,1)); // 4
omades.push_back(new Panathinaikos(3,0,3)); // 5
omades.push_back(new Panathinaikos(2,1,1)); // 6
omades.push_back(new Panathinaikos(1,0,1)); // 7
omades.push_back(new Panathinaikos(2,0,2)); // 8
omades.push_back(new Panathinaikos(1,0,1)); // 9
omades.push_back(new Panathinaikos(5,1,4)); // 10
omades.push_back(new Panathinaikos(1,1,0)); // 11
omades.push_back(new Panathinaikos(1,0,1)); // 12
omades.push_back(new Panathinaikos(2,0,2)); // 13
omades.push_back(new Panathinaikos(1,1,0)); // 14
omades.push_back(new Panathinaikos(1,1,0)); // 15
omades.push_back(new Panathinaikos(1,0,1)); // 16
omades.push_back(new Panathinaikos(0,1,1)); // 17
omades.push_back(new Panathinaikos(1,0,1)); // 18
omades.push_back(new Panathinaikos(0,3,3)); // 19
omades.push_back(new Panathinaikos(0,1,1)); // 20
omades.push_back(new Panathinaikos(2,0,2)); // 21
omades.push_back(new Panathinaikos(2,1,1)); // 22
omades.push_back(new Panathinaikos(2,0,2)); // 23
omades.push_back(new Panathinaikos(0,0,0)); // 24
omades.push_back(new Panathinaikos(2,0,2)); // 25
omades.push_back(new Panathinaikos(2,0,2)); // 26
omades.push_back(new AEK(3,0,3)); // 1
omades.push_back(new AEK(0,1,1)); // 2
omades.push_back(new AEK(2,0,2)); // 3
omades.push_back(new AEK(1,2,1)); // 4
omades.push_back(new AEK(2,0,2)); // 5
omades.push_back(new AEK(4,1,3)); // 6
omades.push_back(new AEK(2,0,2)); // 7
omades.push_back(new AEK(1,0,1)); // 8
omades.push_back(new AEK(2,0,2)); // 9
omades.push_back(new AEK(2,0,2)); // 10
omades.push_back(new AEK(1,1,0)); // 11
omades.push_back(new AEK(3,0,3)); // 12
omades.push_back(new AEK(0,0,0)); // 13
omades.push_back(new AEK(3,0,3)); // 14
omades.push_back(new AEK(4,0,4)); // 15
omades.push_back(new AEK(1,2,1)); // 16
omades.push_back(new AEK(1,0,1)); // 17
omades.push_back(new AEK(4,1,3)); // 18
omades.push_back(new AEK(2,1,1)); // 19
omades.push_back(new AEK(3,0,3)); // 20
omades.push_back(new AEK(1,0,1)); // 21
omades.push_back(new AEK(3,0,3)); // 22
omades.push_back(new AEK(0,2,2)); // 23
omades.push_back(new AEK(2,0,2)); // 24
omades.push_back(new AEK(3,0,3)); // 25
omades.push_back(new AEK(1,3,2)); // 26
omades.push_back(new Olympiakos(2,0,2)); // 1
omades.push_back(new Olympiakos(0,0,0)); // 2
omades.push_back(new Olympiakos(3,1,2)); // 3
omades.push_back(new Olympiakos(1,1,0)); // 4
omades.push_back(new Olympiakos(1,2,1)); // 5
omades.push_back(new Olympiakos(2,0,2)); // 6
omades.push_back(new Olympiakos(2,1,1)); // 7
omades.push_back(new Olympiakos(1,2,1)); // 8
omades.push_back(new Olympiakos(2,0,2)); // 9
omades.push_back(new Olympiakos(2,0,2)); // 10
omades.push_back(new Olympiakos(1,1,0)); // 11
omades.push_back(new Olympiakos(1,0,1)); // 12
omades.push_back(new Olympiakos(0,0,0)); // 13
omades.push_back(new Olympiakos(2,2,0)); // 14
omades.push_back(new Olympiakos(5,0,5)); // 15
omades.push_back(new Olympiakos(2,0,2)); // 16
omades.push_back(new Olympiakos(4,0,4)); // 17
omades.push_back(new Olympiakos(1,0,1)); // 18
omades.push_back(new Olympiakos(1,1,0)); // 19
omades.push_back(new Olympiakos(2,1,1)); // 20
omades.push_back(new Olympiakos(0,0,0)); // 21
omades.push_back(new Olympiakos(6,1,5)); // 22
omades.push_back(new Olympiakos(3,0,3)); // 23
omades.push_back(new Olympiakos(0,0,0)); // 24
omades.push_back(new Olympiakos(6,0,6)); // 25
omades.push_back(new Olympiakos(3,1,2)); // 26
omades.push_back(new PAOK(1,0,1)); // 1
omades.push_back(new PAOK(2,1,1)); // 2
omades.push_back(new PAOK(0,0,0)); // 3
omades.push_back(new PAOK(1,0,1)); // 4
omades.push_back(new PAOK(1,1,0)); // 5
omades.push_back(new PAOK(1,2,1)); // 6
omades.push_back(new PAOK(1,1,0)); // 7
omades.push_back(new PAOK(2,1,1)); // 8
omades.push_back(new PAOK(2,2,0)); // 9
omades.push_back(new PAOK(0,2,2)); // 10
omades.push_back(new PAOK(2,0,2)); // 11
omades.push_back(new PAOK(3,0,3)); // 12
omades.push_back(new PAOK(3,0,3)); // 13
omades.push_back(new PAOK(2,0,2)); // 14
omades.push_back(new PAOK(1,1,0)); // 15
omades.push_back(new PAOK(1,0,1)); // 16
omades.push_back(new PAOK(3,0,3)); // 17
omades.push_back(new PAOK(0,0,0)); // 18
omades.push_back(new PAOK(3,0,3)); // 19
omades.push_back(new PAOK(3,2,1)); // 20
omades.push_back(new PAOK(0,0,0)); // 21
omades.push_back(new PAOK(2,2,0)); // 22
omades.push_back(new PAOK(2,0,2)); // 23
omades.push_back(new PAOK(0,0,0)); // 24
omades.push_back(new PAOK(6,0,6)); // 25
omades.push_back(new PAOK(1,0,1)); // 26
omades.push_back(new Arhs(3,0,3)); // 1
omades.push_back(new Arhs(1,3,2)); // 2
omades.push_back(new Arhs(0,0,0)); // 3
omades.push_back(new Arhs(2,0,2)); // 4
omades.push_back(new Arhs(2,1,1)); // 5
omades.push_back(new Arhs(0,2,2)); // 6
omades.push_back(new Arhs(0,2,2)); // 7
omades.push_back(new Arhs(2,1,1)); // 8
omades.push_back(new Arhs(0,1,1)); // 9
omades.push_back(new Arhs(1,1,0)); // 10
omades.push_back(new Arhs(0,0,0)); // 11
omades.push_back(new Arhs(5,0,5)); // 12
omades.push_back(new Arhs(4,0,4)); // 13
omades.push_back(new Arhs(1,1,0)); // 14
omades.push_back(new Arhs(1,0,1)); // 15
omades.push_back(new Arhs(0,1,1)); // 16
omades.push_back(new Arhs(3,0,3)); // 17
omades.push_back(new Arhs(0,1,1)); // 18
omades.push_back(new Arhs(3,0,3)); // 19
omades.push_back(new Arhs(0,3,3)); // 20
omades.push_back(new Arhs(0,1,1)); // 21
omades.push_back(new Arhs(1,2,1)); // 22
omades.push_back(new Arhs(3,0,3)); // 23
omades.push_back(new Arhs(2,1,1)); // 24
omades.push_back(new Arhs(1,2,1)); // 25
omades.push_back(new Arhs(3,1,2)); // 26
omades.push_back(new Volos(3,3,0)); // 1
omades.push_back(new Volos(1,0,1)); // 2
omades.push_back(new Volos(0,1,1)); // 3
omades.push_back(new Volos(1,1,0)); // 4
omades.push_back(new Volos(2,0,2)); // 5
omades.push_back(new Volos(2,0,2)); // 6
omades.push_back(new Volos(3,2,1)); // 7
omades.push_back(new Volos(2,1,1)); // 8
omades.push_back(new Volos(2,0,2)); // 9
omades.push_back(new Volos(1,5,4)); // 10
omades.push_back(new Volos(2,2,0)); // 11
omades.push_back(new Volos(2,1,1)); // 12
omades.push_back(new Volos(0,3,3)); // 13
omades.push_back(new Volos(0,0,0)); // 14
omades.push_back(new Volos(0,4,4)); // 15
omades.push_back(new Volos(0,0,0)); // 16
omades.push_back(new Volos(0,4,4)); // 17
omades.push_back(new Volos(1,0,1)); // 18
omades.push_back(new Volos(0,3,3)); // 19
omades.push_back(new Volos(2,3,1)); // 20
omades.push_back(new Volos(3,0,3)); // 21
omades.push_back(new Volos(2,1,1)); // 22
omades.push_back(new Volos(0,2,2)); // 23
omades.push_back(new Volos(1,1,0)); // 24
omades.push_back(new Volos(1,0,1)); // 25
omades.push_back(new Volos(0,1,1)); // 26
omades.push_back(new Panaitwlikos(0,1,1)); // 1
omades.push_back(new Panaitwlikos(3,1,2)); // 2
omades.push_back(new Panaitwlikos(1,1,0)); // 3
omades.push_back(new Panaitwlikos(2,1,1)); // 4
omades.push_back(new Panaitwlikos(0,2,2)); // 5
omades.push_back(new Panaitwlikos(4,1,3)); // 6
omades.push_back(new Panaitwlikos(2,3,1)); // 7
omades.push_back(new Panaitwlikos(0,0,0)); // 8
omades.push_back(new Panaitwlikos(0,2,2)); // 9
omades.push_back(new Panaitwlikos(1,1,0)); // 10
omades.push_back(new Panaitwlikos(0,0,0)); // 11
omades.push_back(new Panaitwlikos(0,1,1)); // 12
omades.push_back(new Panaitwlikos(3,1,2)); // 13
omades.push_back(new Panaitwlikos(0,2,2)); // 14
omades.push_back(new Panaitwlikos(0,1,1)); // 15
omades.push_back(new Panaitwlikos(2,0,2)); // 16
omades.push_back(new Panaitwlikos(0,4,4)); // 17
omades.push_back(new Panaitwlikos(1,4,3)); // 18
omades.push_back(new Panaitwlikos(1,1,0)); // 19
omades.push_back(new Panaitwlikos(3,2,1)); // 20
omades.push_back(new Panaitwlikos(0,0,0)); // 21
omades.push_back(new Panaitwlikos(1,6,5)); // 22
omades.push_back(new Panaitwlikos(1,0,1)); // 23
omades.push_back(new Panaitwlikos(0,0,0)); // 24
omades.push_back(new Panaitwlikos(0,2,2)); // 25
omades.push_back(new Panaitwlikos(1,1,0)); // 26
omades.push_back(new Atromhtos(3,1,2)); // 1
omades.push_back(new Atromhtos(1,2,1)); // 2
omades.push_back(new Atromhtos(1,1,0)); // 3
omades.push_back(new Atromhtos(4,1,3)); // 4
omades.push_back(new Atromhtos(0,0,0)); // 5
omades.push_back(new Atromhtos(0,2,2)); // 6
omades.push_back(new Atromhtos(2,1,1)); // 7
omades.push_back(new Atromhtos(0,1,1)); // 8
omades.push_back(new Atromhtos(0,2,2)); // 9
omades.push_back(new Atromhtos(1,2,1)); // 10
omades.push_back(new Atromhtos(0,0,0)); // 11
omades.push_back(new Atromhtos(2,0,2)); // 12
omades.push_back(new Atromhtos(0,2,2)); // 13
omades.push_back(new Atromhtos(1,0,1)); // 14
omades.push_back(new Atromhtos(1,1,0)); // 15
omades.push_back(new Atromhtos(0,2,2)); // 16
omades.push_back(new Atromhtos(2,0,2)); // 17
omades.push_back(new Atromhtos(1,1,0)); // 18
omades.push_back(new Atromhtos(1,1,0)); // 19
omades.push_back(new Atromhtos(1,1,0)); // 20
omades.push_back(new Atromhtos(0,1,1)); // 21
omades.push_back(new Atromhtos(1,2,1)); // 22
omades.push_back(new Atromhtos(1,0,1)); // 23
omades.push_back(new Atromhtos(1,2,1)); // 24
omades.push_back(new Atromhtos(1,1,2)); // 25
omades.push_back(new Atromhtos(0,2,2)); // 26
omades.push_back(new OFH(1,3,2)); // 1
omades.push_back(new OFH(0,2,2)); // 2
omades.push_back(new OFH(1,0,1)); // 3
omades.push_back(new OFH(1,2,1)); // 4
omades.push_back(new OFH(1,1,0)); // 5
omades.push_back(new OFH(0,2,2)); // 6
omades.push_back(new OFH(1,2,0)); // 7
omades.push_back(new OFH(2,2,0)); // 8
omades.push_back(new OFH(0,0,0)); // 9
omades.push_back(new OFH(1,1,0)); // 10
omades.push_back(new OFH(0,2,2)); // 11
omades.push_back(new OFH(0,3,3)); // 12
omades.push_back(new OFH(2,1,1)); // 13
omades.push_back(new OFH(0,1,1)); // 14
omades.push_back(new OFH(1,1,0)); // 15
omades.push_back(new OFH(0,0,0)); // 16
omades.push_back(new OFH(4,0,4)); // 17
omades.push_back(new OFH(0,0,0)); // 18
omades.push_back(new OFH(1,0,1)); // 19
omades.push_back(new OFH(1,2,1)); // 20
omades.push_back(new OFH(0,0,0)); // 21
omades.push_back(new OFH(4,1,3)); // 22
omades.push_back(new OFH(0,3,3)); // 23
omades.push_back(new OFH(2,0,2)); // 24
omades.push_back(new OFH(0,3,3)); // 25
omades.push_back(new OFH(0,2,2)); // 26
omades.push_back(new Asteras(3,3,0)); // 1
omades.push_back(new Asteras(0,0,0)); // 2
omades.push_back(new Asteras(0,0,0)); // 3
omades.push_back(new Asteras(0,2,2)); // 4
omades.push_back(new Asteras(1,1,0)); // 5
omades.push_back(new Asteras(2,0,2)); // 6
omades.push_back(new Asteras(0,1,1)); // 7
omades.push_back(new Asteras(0,0,0)); // 8
omades.push_back(new Asteras(2,2,0)); // 9
omades.push_back(new Asteras(1,2,1)); // 10
omades.push_back(new Asteras(1,1,0)); // 11
omades.push_back(new Asteras(0,2,2)); // 12
omades.push_back(new Asteras(1,0,1)); // 13
omades.push_back(new Asteras(0,0,0)); // 14
omades.push_back(new Asteras(0,5,5)); // 15
omades.push_back(new Asteras(3,0,3)); // 16
omades.push_back(new Asteras(0,3,3)); // 17
omades.push_back(new Asteras(0,0,0)); // 18
omades.push_back(new Asteras(0,1,1)); // 19
omades.push_back(new Asteras(1,0,1)); // 20
omades.push_back(new Asteras(0,0,0)); // 21
omades.push_back(new Asteras(2,2,0)); // 22
omades.push_back(new Asteras(1,1,0)); // 23
omades.push_back(new Asteras(0,2,2)); // 24
omades.push_back(new Asteras(1,1,0)); // 25
omades.push_back(new Asteras(0,1,1)); // 26
omades.push_back(new Giannina(0,2,2)); // 1
omades.push_back(new Giannina(1,1,0)); // 2
omades.push_back(new Giannina(0,2,2)); // 3
omades.push_back(new Giannina(2,1,1)); // 4
omades.push_back(new Giannina(0,3,3)); // 5
omades.push_back(new Giannina(1,4,3)); // 6
omades.push_back(new Giannina(1,2,1)); // 7
omades.push_back(new Giannina(2,2,0)); // 8
omades.push_back(new Giannina(2,2,0)); // 9
omades.push_back(new Giannina(2,1,1)); // 10
omades.push_back(new Giannina(0,2,2)); // 11
omades.push_back(new Giannina(1,2,1)); // 12
omades.push_back(new Giannina(0,4,4)); // 13
omades.push_back(new Giannina(2,2,0)); // 14
omades.push_back(new Giannina(1,1,0)); // 15
omades.push_back(new Giannina(2,1,1)); // 16
omades.push_back(new Giannina(3,1,2)); // 17
omades.push_back(new Giannina(0,1,1)); // 18
omades.push_back(new Giannina(1,1,0)); // 19
omades.push_back(new Giannina(1,1,0)); // 20
omades.push_back(new Giannina(0,0,0)); // 21
omades.push_back(new Giannina(0,0,0)); // 22
omades.push_back(new Giannina(1,1,0)); // 23
omades.push_back(new Giannina(0,0,0)); // 24
omades.push_back(new Giannina(0,1,1)); // 25
omades.push_back(new Giannina(1,3,2)); // 26
omades.push_back(new Iwnikos(0,1,1)); // 1
omades.push_back(new Iwnikos(0,0,0)); // 2
omades.push_back(new Iwnikos(1,3,2)); // 3
omades.push_back(new Iwnikos(1,4,3)); // 4
omades.push_back(new Iwnikos(0,2,2)); // 5
omades.push_back(new Iwnikos(1,4,3)); // 6
omades.push_back(new Iwnikos(1,1,0)); // 7
omades.push_back(new Iwnikos(1,2,1)); // 8
omades.push_back(new Iwnikos(2,2,0)); // 9
omades.push_back(new Iwnikos(1,1,0)); // 10
omades.push_back(new Iwnikos(2,0,2)); // 11
omades.push_back(new Iwnikos(0,3,3)); // 12
omades.push_back(new Iwnikos(0,1,1)); // 13
omades.push_back(new Iwnikos(1,1,0)); // 14
omades.push_back(new Iwnikos(0,1,1)); // 15
omades.push_back(new Iwnikos(0,2,2)); // 16
omades.push_back(new Iwnikos(0,2,2)); // 17
omades.push_back(new Iwnikos(0,1,1)); // 18
omades.push_back(new Iwnikos(1,2,1)); // 19
omades.push_back(new Iwnikos(2,0,2)); // 20
omades.push_back(new Iwnikos(1,0,1)); // 21
omades.push_back(new Iwnikos(0,0,0)); // 22
omades.push_back(new Iwnikos(0,1,1)); // 23
omades.push_back(new Iwnikos(0,2,2)); // 24
omades.push_back(new Iwnikos(0,6,6)); // 25
omades.push_back(new Iwnikos(1,0,1)); // 26
omades.push_back(new Lamia(0,3,3)); // 1
omades.push_back(new Lamia(1,1,0)); // 2
omades.push_back(new Lamia(0,0,0)); // 3
omades.push_back(new Lamia(0,1,1)); // 4
omades.push_back(new Lamia(0,0,0)); // 5
omades.push_back(new Lamia(1,0,1)); // 6
omades.push_back(new Lamia(1,1,0)); // 7
omades.push_back(new Lamia(0,2,2)); // 8
omades.push_back(new Lamia(0,0,0)); // 9
omades.push_back(new Lamia(0,2,2)); // 10
omades.push_back(new Lamia(2,2,0)); // 11
omades.push_back(new Lamia(0,5,5)); // 12
omades.push_back(new Lamia(1,3,2)); // 13
omades.push_back(new Lamia(0,3,3)); // 14
omades.push_back(new Lamia(1,1,0)); // 15
omades.push_back(new Lamia(0,3,3)); // 16
omades.push_back(new Lamia(0,3,3)); // 17
omades.push_back(new Lamia(1,1,0)); // 18
omades.push_back(new Lamia(0,0,0)); // 19
omades.push_back(new Lamia(0,2,2)); // 20
omades.push_back(new Lamia(0,2,2)); // 21
omades.push_back(new Lamia(1,4,3)); // 22
omades.push_back(new Lamia(0,3,3)); // 23
omades.push_back(new Lamia(1,1,0)); // 24
omades.push_back(new Lamia(2,1,1)); // 25
omades.push_back(new Lamia(1,1,0)); // 26
omades.push_back(new Levadeiakos(0,3,3)); // 1
omades.push_back(new Levadeiakos(0,0,0)); // 2
omades.push_back(new Levadeiakos(0,1,1)); // 3
omades.push_back(new Levadeiakos(1,2,1)); // 4
omades.push_back(new Levadeiakos(1,1,0)); // 5
omades.push_back(new Levadeiakos(0,1,1)); // 6
omades.push_back(new Levadeiakos(1,1,0)); // 7
omades.push_back(new Levadeiakos(1,2,1)); // 8
omades.push_back(new Levadeiakos(0,2,2)); // 9
omades.push_back(new Levadeiakos(2,1,1)); // 10
omades.push_back(new Levadeiakos(0,0,0)); // 11
omades.push_back(new Levadeiakos(0,1,1)); // 12
omades.push_back(new Levadeiakos(1,2,1)); // 13
omades.push_back(new Levadeiakos(1,1,0)); // 14
omades.push_back(new Levadeiakos(1,0,1)); // 15
omades.push_back(new Levadeiakos(0,1,1)); // 16
omades.push_back(new Levadeiakos(1,3,2)); // 17
omades.push_back(new Levadeiakos(0,0,0)); // 18
omades.push_back(new Levadeiakos(0,0,0)); // 19
omades.push_back(new Levadeiakos(2,3,1)); // 20
omades.push_back(new Levadeiakos(0,3,3)); // 21
omades.push_back(new Levadeiakos(0,3,3)); // 22
omades.push_back(new Levadeiakos(0,1,1)); // 23
omades.push_back(new Levadeiakos(0,0,0)); // 24
omades.push_back(new Levadeiakos(0,6,6)); // 25
omades.push_back(new Levadeiakos(2,0,2)); // 26

    double totalGoals = 0;
    int numGames = omades.size();
    for (const auto& omada : omades) {
        totalGoals =+ omada->getGF();
    }
    double averageGoalsPerGame = totalGoals / numGames;
   
    int aboveAverage;
    int belowAverage;

    for (const auto& omada : omades) {
        int goals = omada->getGF();
        if (goals > averageGoalsPerGame) {
            aboveAverage++;
        } else if (goals < averageGoalsPerGame) {
            belowAverage++;
        }
    }

   
    std::cout << "M.O twn termatwn / agwnisthkhs:\n" << std::endl;
    std::cout << aboveAverage << " agwnistikes eixan panw apo ton M.O twn termatwn, "
              << belowAverage << " agwnistikes eixan katw apo ton M.O twn termatwn, "
              << (numGames - aboveAverage - belowAverage) << " agwnistikes eixan akrivws ton M.O twn termatwn\n" << std::endl;
    std::cout << "Matches: " << std::endl;


    for(const auto& omada : omades) {
        omada->printStats();
    }
    std::map<std::string, std::pair<int, int>> stats;

    for (auto omada : omades) {
        std::string teamName = omada->getTeamName();
        int GF = omada->getGF();
        int GA = omada->getGA();

        if (stats.find(teamName) == stats.end()) {
            stats[teamName] = std::make_pair(GF, GA);
        } else {
            stats[teamName].first += GF;
            stats[teamName].second += GA;
        }
    }

   
    for (const auto& entry : stats) {
        std::string teamName = entry.first;
        int GF = entry.second.first;
        int GA = entry.second.second;
        int GD = GF - GA;

        std::cout << "Omada: " << teamName << std::endl;
        std::cout << "GF: " << GF << std::endl;
        std::cout << "GA: " << GA << std::endl;
        std::cout << "GD: " << GD << std::endl;
        std::cout << std::endl;
    }

    for (const auto& omada : omades) {
        std::string teamName = omada->getTeamName();
        int gf = omada->getGF();
        int ga = omada->getGA();

        int teamScore = 0;

        if (gf > ga) {
            teamScore = 3;
        } else if (gf == ga) {
            teamScore = 1;
        }
        scores[teamName] += teamScore;
    }

    for (const auto& score : scores) {
        std::cout << score.first << ": " << score.second << " point" << (score.second == 1 ? "t" : "s") << std::endl;
    }
   
    for (auto omada : omades) {
        delete omada;
    }
    omades.clear();

    return 0;
}